package consul

import (
	"log"
	"net/http"
	"time"

	"github.com/hashicorp/consul/api"
	"github.com/tmtk75/weque/webhook"
)

var Client *api.Client

func init() {
	cfg := api.DefaultConfig() // aware of CONSUL_HTTP_ADDR
	c, err := api.NewClient(cfg)
	if err != nil {
		log.Fatalf("%v", err)
	}
	Client = c
	//log.Printf("%v", cfg)
}

func Put(wh webhook.Webhook, r *http.Request, b []byte, body *webhook.WebhookBody) error {
	k, v, err := wh.NewKeyValue(r, b, body)
	if err != nil {
		return err
	}
	log.Printf("key: %v", k)

	//sid, _, err := Client.Session().Create(&api.SessionEntry{Name: body.Delivery, TTL: "120s"}, nil)
	//if err != nil {
	//	sendError(w, 500, fmt.Sprintf("%v", err))
	//	return
	//}
	//log.Printf("sid: %v", sid)

	kv := Client.KV()
	_, err = kv.Put(&api.KVPair{Key: k, Value: v}, nil)
	if err != nil {
		return err
	}

	return nil
}

func FireEvent(wh webhook.Webhook, r *http.Request, b []byte, body *webhook.WebhookBody) error {
	p := body.Bytes()
	log.Printf("payload-length: %v", len(p))
	name := wh.EventName(r, b, body)
	e := &api.UserEvent{Name: name, Payload: p}

	t := time.Now()
	log.Printf("[debug] start firing event: %v", t)
	s, m, err := Client.Event().Fire(e, nil)
	log.Printf("[debug] finished firing event: %v", time.Now().Unix()-t.Unix())
	if err != nil {
		return err
	}
	log.Printf("Fired: event: %v, id: %v, meta: %v", name, s, m)

	return nil
}
