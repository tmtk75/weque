package weque

import (
	"encoding/json"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"sort"
	"text/template"

	"github.com/hashicorp/consul/api"
	cli "github.com/jawher/mow.cli"
	"github.com/tmtk75/weque/webhook"
)

func ParseEventCommands(cmd *cli.Cmd) {
	cmd.Command("keyprefix", "", ParseKeyprefix)
	cmd.Command("user-event", "", ParseUserEvent)
}

func ParseKeyprefix(cmd *cli.Cmd) {
	cmd.Action = func() {
		b, err := ioutil.ReadAll(os.Stdin)
		if err != nil {
			log.Fatalf("%v", err)
		}

		a := []api.KVPair{}
		err = json.Unmarshal(b, &a)
		if err != nil {
			log.Fatalf("%v", err)
		}
		if len(a) == 0 {
			fmt.Println("# No data")
			return
		}

		sort.Slice(a, func(i, j int) bool { return a[i].ModifyIndex < a[j].ModifyIndex })
		last := a[len(a)-1]
		//fmt.Printf("%v", string(last.Value))

		var wh struct {
			Body webhook.WebhookBody `json:"webhook"`
		}
		err = json.Unmarshal(last.Value, &wh)
		if err != nil {
			log.Fatalf("%v", err)
		}

		tmpl := `export CREATE_INDEX={{ .Last.CreateIndex }}
export MODIFY_INDEX={{ .Last.ModifyIndex }}
export REPOSITORY_NAME={{ .Body.Repository.Name }}
export REPOSITORY_OWNER_NAME={{ .Body.Repository.Owner.Name }}
export DELIVERY={{ .Body.Delivery }}
export REF={{ .Body.Ref }}
export BEFORE={{ .Body.Before }}
export AFTER={{ .Body.After }}
export PUSHER_NAME={{ .Body.Pusher.Name }}
`
		t := template.Must(template.New("env").Parse(tmpl))
		t.Execute(os.Stdout, struct {
			Last api.KVPair
			Body webhook.WebhookBody
		}{
			Last: last,
			Body: wh.Body,
		})
	}
}

func ParseUserEvent(cmd *cli.Cmd) {
	cmd.Action = func() {
		b, err := ioutil.ReadAll(os.Stdin)
		if err != nil {
			log.Fatalf("%v", err)
		}

		a := []api.UserEvent{}
		err = json.Unmarshal(b, &a)
		if err != nil {
			log.Fatalf("%v", err)
		}
		if len(a) == 0 {
			fmt.Println("# No data")
			return
		}
		if len(a) > 1 {
			log.Printf("%v", string(b))
		}

		sort.Slice(a, func(i, j int) bool { return a[i].LTime < a[j].LTime })
		last := a[len(a)-1]

		var wh webhook.WebhookBody
		err = json.Unmarshal(last.Payload, &wh)
		if err != nil {
			log.Fatalf("%v", err)
		}

		tmpl := `export EVENT_ID={{ .Last.ID }}
export EVENT_NAME={{ .Last.Name }}
export REPOSITORY_NAME={{ .Body.Repository.Name }}
export REPOSITORY_OWNER_NAME={{ .Body.Repository.Owner.Name }}
export DELIVERY={{ .Body.Delivery }}
export REF={{ .Body.Ref }}
export BEFORE={{ .Body.Before }}
export AFTER={{ .Body.After }}
export PUSHER_NAME={{ .Body.Pusher.Name }}
`
		t := template.Must(template.New("env").Parse(tmpl))
		t.Execute(os.Stdout, struct {
			Last api.UserEvent
			Body webhook.WebhookBody
		}{
			Last: last,
			Body: wh,
		})
	}
}
