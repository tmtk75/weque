package bitbucket

import (
	"bytes"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"io/ioutil"
	"log"
	"net/http"
	"os"
	"strings"
)

func Commands(c *cli.Cmd) {
	c.LongDesc = `To give your token,

    export BITBUCKET_API_KEY=...`

	c.Command("list", "List hooks", func(c *cli.Cmd) {
		repo := c.String(cli.StringArg{Name: "REPO", Desc: "Repository name. ex) tmtk75/weque"})
		c.Spec = "REPO"
		c.Action = func() {
			user := strings.Split(*repo, "/")[0]
			s, err := Request(user, "GET", fmt.Sprintf("/%s/hooks", *repo), nil)
			if err != nil {
				log.Fatal(err)
			}
			fmt.Println(s)
		}
	})

	c.Command("create", "Create hook", func(c *cli.Cmd) {
		var (
			repo = c.String(cli.StringArg{Name: "REPO", Desc: "Repository name. ex) tmtk75/weque"})
			url  = c.String(cli.StringArg{Name: "URL", Desc: "Payload URL"})
		)
		c.Spec = "REPO URL"

		c.Action = func() {
			a := Webhook{
				URL:    *url,
				Active: true,
				Events: []string{"repo:push"},
			}
			user := strings.Split(*repo, "/")[0]
			s, err := Request(user, "POST", fmt.Sprintf("/%v/hooks", *repo), bytes.NewBuffer(a.Bytes()))
			if err != nil {
				log.Fatal(err)
			}
			fmt.Println(s)
		}
	})
}

type Webhook struct {
	URL    string   `json:"url"`
	Active bool     `json:"active"`
	Events []string `json:"events"`
}

func (w Webhook) Bytes() []byte {
	b, _ := json.Marshal(w)
	return b
}

func Request(user, method, path string, body io.Reader) (string, error) {
	var (
		apikey   = os.Getenv("BITBUCKET_API_KEY")
		endpoint = "https://api.bitbucket.org/2.0/repositories"
	)

	req, err := http.NewRequest(method, fmt.Sprintf("%s%s", endpoint, path), body)
	if err != nil {
		log.Print(err)
		return "", err
	}
	token := base64.StdEncoding.EncodeToString([]byte(fmt.Sprintf("%s:%s", user, apikey)))
	req.Header.Add("Authorization", fmt.Sprintf("Basic %v", token))

	c := http.Client{}
	res, err := c.Do(req)
	if err != nil {
		log.Print(err)
		return "", err
	}
	defer res.Body.Close()

	b, err := ioutil.ReadAll(res.Body)
	if err != nil {
		log.Print(err)
		return "", err
	}

	return string(b), nil
}
